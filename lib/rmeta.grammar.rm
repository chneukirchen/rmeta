meta RMeta::Grammar <: RMeta::Compiler {
  exactly s ::= => [s.split('').each { |c| _exactly c }];
  token t ::= <ws> <exactly t> <ws>;
  main ::= <init> <token "meta"> <constant>:name (<token "<:"> <constant>)?:s <token "{"> <rule>* <token "}">
        => [@name = name; @superclass = s || "RMeta::Parser"; self];
  init ::= => [@rules = {}];
  rule ::= <identifier>:id <identifier>*:args <token "::="> <expr>:e 
           (<token "=>"> <bracketcode>)?:c <token ";"> 
        => [@rules[id] = [args, c ? [:code, c, e] : e]];
  expr ::= <altexpr>;
  altexpr ::= <seqexpr>:first (<token '|'> <seqexpr>)*:rest
           => [rest.empty? ? first : [:alt, first, *rest]];
  seqexpr ::= (<bindexpr>)*:e => [e.size == 1 ? e.first : [:seq, *e]];
  bindexpr ::= <notexpr>:e (<token ":"> <identifier>)?:id
           => [id ? [:bind, id, e] : e];
  notexpr ::= <token "~">?:n <modexpr>:e => [n ? [:not, e] : e];
  modexpr ::= <primexpr>:e ("+" | "*" | "?")?:m
           => [case m && m.first
                 when "+"; [:one_or_many, e]
                 when "*"; [:many, e]
                 when "?"; [:maybe, e]
                 else e
               end];
  primexpr ::= <literal> | <ref> | <paren>;
  paren ::= <token "("> <expr>:e <token ")"> => [e];
  literal ::= <char> | <string>;
  char ::= <ws> "'" <_anything>:c <token "'"> => [[:lit, c]];
  string ::= <ws> '"' (~'"' <_anything>)*:c <token '"'> => [[:lit, c.join]];
  var ::= <identifier>:i => [[:var, i]];
  ref ::= <token "<"> <identifier>:id (<literal> | <var>)*:args <token ">"> => [[:ref, id, *args]];
  bracketcode ::= <token "["> <code>:c <token "]"> => [c];
  code ::= (<brackcode> | <nonbrack>)*:c => [c.join];
  brackcode ::= "[" <code>:c "]" => ["[#{c}]"];
  nonbrack ::= ~"[" ~"]" <_anything>:c => [c];
  ws ::= <_class "\s">*;
  constant ::= <ws> <_class "A-Z">:f (<_class "\w"> | "::")*:r => [f + r.join];
  identifier ::= <ws> <_class "a-z_">:f <_class "\w">*:r => [f + r.join];
}
